void cnez_dump(void *v, FILE *fp)
{
	size_t i;
	Tree *t = (Tree*)v;
	if(t == NULL) {
		fputs("null", fp);
		return;
	}
	fputs("[#", fp);
	fputs(_tags[t->tag], fp);
	if(t->size == 0) {
		fputs(" '", fp);
		for(i = 0; i < t->len; i++) {
			fputc(t->text[i], fp);
		}
		fputs("'", fp);
	}
	else {
		for(i = 0; i < t->size; i++) {
			fputs(" ", fp);
			if(t->labels[i] != 0) {
				fputs("$", fp);
				fputs(_labels[t->labels[i]], fp);
				fputs("=", fp);
			}
			cnez_dump(t->childs[i], fp);
		}
	}
	fputs("]", fp);
}

#ifdef MAIN
#include<sys/time.h> // for using gettimeofday

static const char *get_input(const char *path, size_t *size)
{
	size_t len;
	size_t readed;
	char *data;
	FILE *fp = fopen(path, "rb");
    	if(fp != NULL) {		
    		fseek(fp, 0, SEEK_END);
    		size[0] = (size_t) ftell(fp);
    		fseek(fp, 0, SEEK_SET);
    		char *buf = (char *) calloc(1, len + 1);
    		size_t readed = fread(buf, 1, len, fp);
		if(readed != size[0]) {
			fprintf(stderr, "read error: %s\n", path);
			exit(1);
		}
		fclose(fp);
		return (const char*)buf;
	}
	size[0] = strlen(path);
	return path;
}

static double timediff(struct timeval *s, struct timeval *e)
{
	double t1 = (e->tv_sec - s->tv_sec) * 1000.0;
	double t2 = (e->tv_usec - s->tv_usec) / 1000.0;
	return t1 + t2; /* ms */
}

int cnez_main(int ac, const char **av, void* (*parse)(const char *input, size_t len))
{
	size_t len;
	const char *input = get_input(av[1], &len);
	if(getenv("BENCH") != NULL) {
		struct timeval s, e;
		gettimeofday(&s, NULL);
		void *data = parse(input, len);
		gettimeofday(&e, NULL);
		fprintf(stdout, "%s %f[ms]\n", data != NULL ? "OK" : "FAIL", timediff(&s, &e));
		return 0;
	}
	void *data = parse(input, len);
	cnez_dump(data, stdout);
	fprintf(stdout, "\n");
	return 0;
}
#endif
